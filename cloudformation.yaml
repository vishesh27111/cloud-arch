AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for EC2, Lambda, API Gateway, S3, and DynamoDB

Resources:

  # VPC
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'Term-VPC'

  # Internet Gateway
  MyInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'MyInternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: 'PublicSubnet1'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.3.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: 'PublicSubnet2'

  # Private Subnets
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: 'PrivateSubnet1'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.4.0/24'
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: 'PrivateSubnet2'

  # Route Table for Public Subnet
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: 'PublicRouteTable'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MyInternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Route Table for Private Subnet
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: 'PrivateRouteTable'

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # NAT Gateway
  NatEIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: 'vpc'

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: 'NatGateway'

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  # Security Group
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow SSH and HTTP access'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: '142.134.20.77/24'  # Replace with your IP range
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: '18.206.107.24/29'  # EC2 Instance Connect service IP range
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '0'
          ToPort: '0'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: 'MySecurityGroup'

  
  # Load Balancer
  MyLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: 'MyLoadBalancer'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref MySecurityGroup
      Scheme: 'internet-facing'
      LoadBalancerAttributes:
        - Key: 'deletion_protection.enabled'
          Value: 'false'
        - Key: 'idle_timeout.timeout_seconds'
          Value: '60'
      Tags:
        - Key: Name
          Value: 'MyLoadBalancer'

  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: 'HTTP'

  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: 'MyTargetGroup'
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 5
      HealthCheckPath: '/'
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      Port: 80
      Protocol: 'HTTP'
      VpcId: !Ref MyVPC
      TargetType: 'instance'

  # EC2 Instance
  # MyEC2Instance:
  #   Type: 'AWS::EC2::Instance'
  #   Properties:
  #     InstanceType: 't2.micro'
  #     ImageId: 'ami-0b72821e2f351e396'  # Update with your desired AMI ID
  #     KeyName: 'e-com-key'  # Specify your EC2 key pair
  #     SecurityGroupIds:
  #       - !Ref MySecurityGroup
  #     SubnetId: !Ref PublicSubnet1
  #     Monitoring: true    # operational excellence
  #     Tags:
  #       - Key: Name
  #         Value: 'Application'

  # Auto Scaling Group
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: 'AutoScalingGroup'
          PropagateAtLaunch: 'true'

  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: 'ami-0b72821e2f351e396'  # Update with your desired AMI ID
      InstanceType: 't2.micro'
      KeyName: 'e-com-key'  # Specify your EC2 key pair
      SecurityGroups:
        - !Ref MySecurityGroup

  ScalingPolicyHighCPU:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: 'TargetTrackingScaling'
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: 'ASGAverageCPUUtilization'
        TargetValue: 70.0
  
  # # Backup Plan (for EC2) 

  BackupVault:
    Type: 'AWS::Backup::BackupVault'
    Properties:
      BackupVaultName: 'MyBackupVault'

  DynamoDBSnapshotPolicy:
    Type: 'AWS::Backup::BackupPlan'
    Properties:
      BackupPlan:
        BackupPlanName: 'DynamoDBBackupPlan'
        BackupPlanRule:
          - RuleName: 'DailyDynamoDBBackup'
            TargetBackupVault: !Ref BackupVault
            ScheduleExpression: 'cron(0 0 * * ? *)'
            StartWindowMinutes: 60
            CompletionWindowMinutes: 180

  # Lambda Function
  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'Fetch-Data'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::685458129024:role/LabRole'  # Specify the existing IAM Role ARN
      Code:
        S3Bucket: 'buck-lamb'
        S3Key: 'index.zip'
      Runtime: 'nodejs20.x'
      Environment:
        Variables:
          LOG_LEVEL: 'DEBUG'
  
  # Invoke Permission
  LambdaApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MyLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*/*'

# API Gateway
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: get-products
      ApiKeySourceType: "HEADER"
      EndpointConfiguration:
        Types:
          - "REGIONAL"

# API Resource
  MyApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt [MyApiGateway, RootResourceId]
      PathPart: 'all-products'
  
# GET method
  ApiGatewayMethodGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyApiGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: false
      # RequestParameters:
      #   "method.request.path.proxy": true  #  Proxy not required
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations'
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{}'
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates: { }

# OPTIONS method
  ApiGatewayOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'OPTIONS'
      ResourceId: !Ref MyApiGatewayResource
      RestApiId: !Ref MyApiGateway
      Integration:
        Type: 'MOCK'
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{"statusCode": 200}'  #  #  Integration Response - Mapping template
        RequestTemplates: 
            application/json: '{"statusCode": 200}'  #  Integration Request - Mapping template
      MethodResponses:
        - StatusCode: '200' 
          ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"

# Deployment Stages
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref MyApiGateway
      StageName: 'dev'
    DependsOn: [ApiGatewayMethodGetMethod, ApiGatewayOptionsMethod]  # mention all methods

Outputs:
  ApiUrl:
    Description: 'API Gateway URL'
    Value:
      Fn::Sub: 'https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/all-products'  #  update url

  VPCId:
    Description: 'VPC ID'
    Value: !Ref MyVPC

  # EC2InstanceId:
  #   Description: 'EC2 Instance ID'
  #   Value: !Ref MyEC2Instance

  LambdaFunctionName:
    Description: 'Lambda Function Name'
    Value: !Ref MyLambdaFunction

